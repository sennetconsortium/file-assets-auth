server {
    # Only root can listen on ports below 1024, we use higher-numbered ports
    # since nginx is running under non-root user hubmap
    listen 8080;

    server_name localhost;
    root /usr/share/nginx/html;

    # We need this logging for inspecting auth requests from other internal services
    # Logging to the mounted volume for outside container access
    access_log /usr/src/app/log/nginx_access_auth-server.log;
    error_log /usr/src/app/log/nginx_error_auth-server.log warn;

    location = /favicon.ico { access_log off; log_not_found off; }

    # Pass requests to the uWSGI server using the "uwsgi" protocol on port 5000
    location / {
        include uwsgi_params;
        uwsgi_pass uwsgi://localhost:5000;
    }
}

server {
    # Only root can listen on ports below 1024, we use higher-numbered ports
    # since nginx is running under non-root user hubmap
    listen 8081;

    server_name localhost;
    root /Users/SLS325/codcc/dev-test/data-dev/assets;

    # We need this logging for inspecting auth requests from other internal services
    # Logging to the mounted volume for outside container access
    access_log /usr/src/app/log/nginx_access_assets-server.log;
    error_log /usr/src/app/log/nginx_error_assets-server.log warn;

    location = /favicon.ico { access_log off; log_not_found off; }

    location / {
        # Always enable CORS
        # Response to preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;

            # These are permitted headers to be used with the actual request
            add_header 'Access-Control-Allow-Headers' 'Authorization, Cache-Control, Content-Type, values, keys, get, set, has, delete, foreach, entries, getsetcookie, append' always;

            # Cache the response to this preflight request in browser for the max age 86400 seconds (= 24 hours)
            add_header 'Access-Control-Max-Age' 86400 always;

            # No Content
            return 204;
        }

        # Response to the original requests (HTTP methods are case-sensitive) with CORS enabled
        if ($request_method ~ (POST|GET|PUT)) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Cache-Control, Content-Type' always;
        }

        auth_request /file_auth;
        sendfile on;
        sendfile_max_chunk 2m;
        tcp_nopush on;
    }

    location = /file_auth {
        internal;
        proxy_pass http://localhost:8080/auth;
        # No need to send the POST body
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-Request-Method $request_method;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Host $proxy_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;
    }
}